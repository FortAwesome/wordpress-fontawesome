{"version":3,"sources":["webpack:///./src/chooser/handleQuery.js"],"names":["configureQueryHandler","params","restApiNamespace","apiFetch","path","method","body","query","console"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;;AAEA,MAAMA,qBAAqB,GAAGC,MAAM,IAAI,eAAiB;AACvD,MAAI;AACF,UAAM;AAAA;AAAA;AAAqBC;AAArB,QADJ,MACF,CADE,CAGF;AACA;AACA;AACA;AACA;AACA;;AACAC,+DAAQ,CAARA,IAAcA,2DAAQ,CAARA,wBATZ,OASYA,CAAdA,EATE,CAWF;AACA;;AACAA,+DAAQ,CAARA,IAAcA,2DAAQ,CAARA,sBAAdA,QAAcA,CAAdA;AAEA,WAAO,MAAMA,2DAAQ,CAAE;AACrBC,UAAI,EAAG,GAAEF,gBADY;AAErBG,YAAM,EAFe;AAGrBC,UAAI,EAAEC;AAHe,KAAF,CAArB;AAfF,IAoBE,cAAe;AACfC,WAAO,CAAPA;AACA,UAAM,UAAN,KAAM,CAAN;AACD;AAxBH;;AA2BA,sF","file":"15.js","sourcesContent":["import apiFetch from '@wordpress/api-fetch'\n\nconst configureQueryHandler = params => async (query) => {\n  try {\n    const { apiNonce, rootUrl, restApiNamespace } = params\n\n    // If apiFetch is from wp.apiFetch, it may already have RootURLMiddleware set up.\n    // If we're using the fallback (i.e. when running in the Classic Editor), then\n    // it doesn't yet have thr RootURLMiddleware.\n    // We want to guarantee that it's there, so we'll always add it.\n    // So what if it was already there? Experiment seems to have shown that this\n    // is idempotent. It doesn't seem to hurt to just do it again, so we will.\n    apiFetch.use( apiFetch.createRootURLMiddleware( rootUrl ) )\n\n    // We need the nonce to be set up because we're going to run our query through\n    // the API controller end point, which requires non-public authorization.\n    apiFetch.use( apiFetch.createNonceMiddleware( apiNonce ) )\n\n    return await apiFetch( {\n      path: `${restApiNamespace}/api`,\n      method: 'POST',\n      body: query\n    } )\n  } catch( error ) {\n    console.error('CAUGHT:', error)\n    throw new Error(error)\n  }\n}\n\nexport default configureQueryHandler\n"],"sourceRoot":""}