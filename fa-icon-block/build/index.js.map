{"version":3,"file":"index.js","mappings":"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","sources":["webpack://fa-icon-block/./src/edit.js","webpack://fa-icon-block/./src/save.js","webpack://fa-icon-block/external window \"React\"","webpack://fa-icon-block/external window [\"wp\",\"blockEditor\"]","webpack://fa-icon-block/external window [\"wp\",\"blocks\"]","webpack://fa-icon-block/external window [\"wp\",\"components\"]","webpack://fa-icon-block/external window [\"wp\",\"element\"]","webpack://fa-icon-block/external window [\"wp\",\"i18n\"]","webpack://fa-icon-block/webpack/bootstrap","webpack://fa-icon-block/webpack/runtime/compat get default export","webpack://fa-icon-block/webpack/runtime/define property getters","webpack://fa-icon-block/webpack/runtime/hasOwnProperty shorthand","webpack://fa-icon-block/webpack/runtime/make namespace object","webpack://fa-icon-block/./src/index.js"],"sourcesContent":["/**\n * Retrieves the translation of text.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/packages/packages-i18n/\n */\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Imports the InspectorControls component, which is used to wrap\n * the block's custom controls that will appear in in the Settings\n * Sidebar when the block is selected.\n *\n * Also imports the React hook that is used to mark the block wrapper\n * element. It provides all the necessary props like the class name.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/packages/packages-block-editor/#inspectorcontrols\n * @see https://developer.wordpress.org/block-editor/reference-guides/packages/packages-block-editor/#useblockprops\n */\nimport { InspectorControls, useBlockProps } from '@wordpress/block-editor';\n\nimport { Fragment } from \"@wordpress/element\";\n/**\n * Imports the necessary components that will be used to create\n * the user interface for the block's settings.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/components/panel/#panelbody\n * @see https://developer.wordpress.org/block-editor/reference-guides/components/text-control/\n * @see https://developer.wordpress.org/block-editor/reference-guides/components/toggle-control/\n */\nimport { PanelBody, TextControl, ToggleControl } from '@wordpress/components';\n\n/**\n * Imports the useEffect React Hook. This is used to set an attribute when the\n * block is loaded in the Editor.\n *\n * @see https://react.dev/reference/react/useEffect\n */\nimport { useEffect } from 'react';\n\n/**\n * The edit function describes the structure of your block in the context of the\n * editor. This represents what the editor will render when the block is used.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-edit-save/#edit\n *\n * @param {Object}   props               Properties passed to the function.\n * @param {Object}   props.attributes    Available block attributes.\n * @param {Function} props.setAttributes Function that updates individual attributes.\n *\n * @return {Element} Element to render.\n */\nexport default function Edit( { attributes, setAttributes } ) {\n\tconst { fallbackCurrentYear, showStartingYear, startingYear } = attributes;\n\n\t// Get the current year and make sure it's a string.\n\tconst currentYear = new Date().getFullYear().toString();\n\n\t// When the block loads, set the fallbackCurrentYear attribute to the\n\t// current year if it's not already set.\n\tuseEffect( () => {\n\t\tif ( currentYear !== fallbackCurrentYear ) {\n\t\t\tsetAttributes( { fallbackCurrentYear: currentYear } );\n\t\t}\n\t}, [ currentYear, fallbackCurrentYear, setAttributes ] );\n\n\tlet displayDate;\n\n\t// Display the starting year as well if supplied by the user.\n\tif ( showStartingYear && startingYear ) {\n\t\tdisplayDate = startingYear + '–' + currentYear;\n\t} else {\n\t\tdisplayDate = currentYear;\n\t}\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<InspectorControls>\n\t\t\t\t<PanelBody title={ __( 'Settings', 'fa-icon-block' ) }>\n\t\t\t\t\t<ToggleControl\n\t\t\t\t\t\tchecked={ showStartingYear }\n\t\t\t\t\t\tlabel={ __( 'Show starting year', 'fa-icon-block' ) }\n\t\t\t\t\t\tonChange={ () =>\n\t\t\t\t\t\t\tsetAttributes( {\n\t\t\t\t\t\t\t\tshowStartingYear: ! showStartingYear,\n\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t}\n\t\t\t\t\t/>\n\t\t\t\t\t{ showStartingYear && (\n\t\t\t\t\t\t<TextControl\n\t\t\t\t\t\t\tlabel={ __( 'Starting year', 'fa-icon-block' ) }\n\t\t\t\t\t\t\tvalue={ startingYear }\n\t\t\t\t\t\t\tonChange={ ( value ) =>\n\t\t\t\t\t\t\t\tsetAttributes( { startingYear: value } )\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t) }\n\t\t\t\t</PanelBody>\n\t\t\t</InspectorControls>\n\t\t\t<p { ...useBlockProps() }>© { displayDate }</p>\n\t\t</Fragment>\n\t);\n}\n","/**\n * React hook that is used to mark the block wrapper element.\n * It provides all the necessary props like the class name.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/packages/packages-block-editor/#useblockprops\n */\nimport { useBlockProps } from '@wordpress/block-editor';\n\n/**\n * The save function defines the way in which the different attributes should\n * be combined into the final markup, which is then serialized by the block\n * editor into `post_content`.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-edit-save/#save\n *\n * @param {Object} props            Properties passed to the function.\n * @param {Object} props.attributes Available block attributes.\n *\n * @return {Element} Element to render.\n */\nexport default function save( { attributes } ) {\n\tconst { fallbackCurrentYear, showStartingYear, startingYear } = attributes;\n\n\t// If there is no fallbackCurrentYear, which could happen if the block\n\t// is loaded from a template/pattern, return null. In this case, block\n\t// rendering will be handled by the render.php file.\n\tif ( ! fallbackCurrentYear ) {\n\t\treturn null;\n\t}\n\n\tlet displayDate;\n\n\t// Display the starting year as well if supplied by the user.\n\tif ( showStartingYear && startingYear ) {\n\t\tdisplayDate = startingYear + '–' + fallbackCurrentYear;\n\t} else {\n\t\tdisplayDate = fallbackCurrentYear;\n\t}\n\n\treturn <p { ...useBlockProps.save() }>© { displayDate }</p>;\n}\n","module.exports = window[\"React\"];","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"blocks\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"element\"];","module.exports = window[\"wp\"][\"i18n\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * Registers a new block provided a unique name and an object defining its behavior.\n *\n * @see https://developer.wordpress.org/block-editor/developers/block-api/#registering-a-block\n */\nimport { registerBlockType } from \"@wordpress/blocks\";\n\n/**\n * Internal dependencies\n */\nimport Edit from \"./edit\";\nimport save from \"./save\";\nimport metadata from \"./block.json\";\n//import { Path, SVG } from \"@wordpress/components\";\n/**\n * Define a custom SVG icon for the block. This icon will appear in\n * the Inserter and when the user selects the block in the Editor.\n */\n/*\nconst calendarIcon = (\n  <SVG\n    viewBox=\"0 0 24 24\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    aria-hidden=\"true\"\n    focusable=\"false\"\n  >\n    <PATH d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm.5 16c0 .3-.2.5-.5.5H5c-.3 0-.5-.2-.5-.5V7h15v12zM9 10H7v2h2v-2zm0 4H7v2h2v-2zm4-4h-2v2h2v-2zm4 0h-2v2h2v-2zm-4 4h-2v2h2v-2zm4 0h-2v2h2v-2z\">\n    </PATH>\n  </SVG>\n);\n*/\n\n/**\n * Every block starts by registering a new block type definition.\n *\n * @see https://developer.wordpress.org/block-editor/developers/block-api/#registering-a-block\n */\nregisterBlockType(metadata.name, {\n  icon: \"calendar-icon\",\n  /**\n   * @see ./edit.js\n   */\n  edit: Edit,\n  /**\n   * @see ./save.js\n   */\n  save,\n});\n"],"names":["__","InspectorControls","useBlockProps","Fragment","PanelBody","TextControl","ToggleControl","useEffect","Edit","attributes","setAttributes","fallbackCurrentYear","showStartingYear","startingYear","currentYear","Date","getFullYear","toString","displayDate","createElement","title","checked","label","onChange","value","save","registerBlockType","metadata","name","icon","edit"],"sourceRoot":""}